-- Rewind Event

-- Function to get all valid egg names in alphabetical order, excluding "Egg Rewind
local function getEggNames()
    local eggNames = {}
    local zones = workspace:FindFirstChild("Zones")

    if zones then
        for _, zone in pairs(zones:GetChildren()) do
            if zone:IsA("Folder") and not zone.Name:match("%d") then -- Ignore zones with numbers
                local interactables = zone:FindFirstChild("Interactables")
                if interactables then
                    local eggs = interactables:FindFirstChild("Eggs")
                    if eggs then
                        for _, egg in pairs(eggs:GetChildren()) do
                            if egg.Name ~= "Rewind" then
                                table.insert(eggNames, egg.Name)
                            end
                        end
                    end
                end
            end
        end
    end

    table.sort(eggNames) -- Sort alphabetically
    return eggNames
end


game:GetService("ReplicatedStorage").Packages.Knit.Services.WrestleService.RF.OnAutoFight:InvokeServer()


local Library = loadstring(game:HttpGetAsync("https://github.com/ActualMasterOogway/Fluent-Renewed/releases/latest/download/Fluent.luau"))()
local SaveManager = loadstring(game:HttpGetAsync("https://raw.githubusercontent.com/ActualMasterOogway/Fluent-Renewed/master/Addons/SaveManager.luau"))()
local InterfaceManager = loadstring(game:HttpGetAsync("https://raw.githubusercontent.com/ActualMasterOogway/Fluent-Renewed/master/Addons/InterfaceManager.luau"))()


local Window = Library:Window{
    Title = "AWS Rewind Event",
    SubTitle = "By Duckie",
    TabWidth = 160,
    Size =  UDim2.fromOffset(580, 460),
    Resize = false, 
    Acrylic = true,
    Theme = "Vynixu",
    MinimizeKey = Enum.KeyCode.LeftShift
}
 Tabs = {
    Event = Window:AddTab({ Title = "Main", Icon = "clock" }),
    Merchant = Window:AddTab({ Title = "Merchants/Shop", Icon = "phosphor-shopping-cart-fill" }),
    Wrestlers = Window:AddTab({ Title = "Wrestlers", Icon = "biceps-flexed" }),
    ATMs = Window:AddTab({ Title = "ATMs", Icon = "phosphor-cash-register-light" }),
    Upgrades = Window:AddTab({ Title = "Player Upgrades", Icon = "arrow-up-1-0" }),
    Towers = Window:AddTab({ Title = "Tower", Icon = "castle" }),
    Claim = Window:AddTab({ Title = "Quest", Icon = "gift" })
}




local PlaytimeSection = Tabs.Event:AddSection("Playtime Pass")

local AutoPlaytimeToggle = PlaytimeSection:AddToggle("AutoPlaytime", {
    Title = "Auto Claim Playtime Pass",
    Default = true
})

AutoPlaytimeToggle:OnChanged(function()
    if AutoPlaytimeToggle.Value then
        -- Claim rewards immediately when enabled
        for i = 1, 12 do
            local args = {
                [1] = "Free",
                [2] = i
            }
            game:GetService("ReplicatedStorage").Packages.Knit.Services.EventPassService.RF.ClaimReward:InvokeServer(unpack(args))
        end
        
        -- Start reset/claim loop
        spawn(function()
            while AutoPlaytimeToggle.Value do
                wait(60) -- Wait before reset
                
                -- Reset pass
                game:GetService("ReplicatedStorage").Packages.Knit.Services.EventPassService.RF.Reset:InvokeServer()
                
                -- Claim all rewards after reset
                for i = 1, 12 do
                    local args = {
                        [1] = "Free",
                        [2] = i
                    }
                    game:GetService("ReplicatedStorage").Packages.Knit.Services.EventPassService.RF.ClaimReward:InvokeServer(unpack(args))
                end
            end
        end)
    end
end)


local function GetCurrentZone()
    local player = game.Players.LocalPlayer

    if player:GetAttribute("ZoneRewindBank") then
        return "RewindBank"
    elseif player:GetAttribute("ZoneRewindEvent") then
        return "RewindEvent"
    end

    return nil
end
local function GetBestPrisonBag()
    local player = game.Players.LocalPlayer
    local currentZone = GetCurrentZone()
    
    local rewindKnuckle = player:GetAttribute("TotalRewindKnucklesV2") or 0
    local punchBagData = require(game:GetService("ReplicatedStorage").Data.PunchBags)
    
    if player:GetAttribute("VIP") == true then
        return "VIP"
    end
    
    local bestTier = "Tier1"  
    local highestRequired = 0
    
    if punchBagData and punchBagData[currentZone] then
        for tier, data in pairs(punchBagData[currentZone]) do
            if data.StrengthRequired and 
               rewindKnuckle >= data.StrengthRequired and 
               data.StrengthRequired > highestRequired then
                bestTier = tier
                highestRequired = data.StrengthRequired
            end
        end
    end
    
    return bestTier
end

local function GetBestPrisonEquipment(equipmentType)
    local player = game.Players.LocalPlayer
    local currentZone = GetCurrentZone()
    
    -- Determine which attribute and data to use based on equipment type
    local attributeName, dataModule, defaultEquipment
    
    if equipmentType == "Dumbells" then
        attributeName = "TotalRewindBicepV2"
        dataModule = "Dumbells"
        defaultEquipment = "Rewind1"
    elseif equipmentType == "Grips" then
        attributeName = "TotalRewindGripV2"
        dataModule = "Grips"
        defaultEquipment = "RewindEvent1"
    else
        -- Default to Dumbells if unknown type
        attributeName = "TotalRewindStrengthV2"
        dataModule = "Dumbells"
        defaultEquipment = "RewindEvent1"
    end
    
    local statValue = player:GetAttribute(attributeName) or 0
    local equipmentData = require(game:GetService("ReplicatedStorage").Data[dataModule])
    
    local bestEquipment = defaultEquipment
    local highestRequired = 0
    
    if equipmentData and equipmentData[currentZone] then
        for name, data in pairs(equipmentData[currentZone]) do
            if data.StrengthRequired and 
               statValue >= data.StrengthRequired and 
               data.StrengthRequired > highestRequired then
                bestEquipment = name
                highestRequired = data.StrengthRequired
            end
        end
    end

    return bestEquipment
end

-- Make sure Tabs is defined before using it
local Tabs = Tabs or {}  -- Use existing Tabs or create a new table if it doesn't exist

-- Add Training Section
local TrainSection = Tabs.Event:AddSection("Auto Train")

local TrainingDropdown = Tabs.Event:AddDropdown("TrainingSelect", {
    Title = "Select Training Type",
    Values = {"Dumbells", "PunchBags", "Grips"}, 
    Multi = false,
    Default = "Dumbells"
})

local AutoTrainToggle = Tabs.Event:AddToggle("AutoTrain", {
    Title = "Auto Train",
    Default = false
})

AutoTrainToggle:OnChanged(function()
    if AutoTrainToggle.Value then
        spawn(function()
            local currentZone = GetCurrentZone()
            
            if TrainingDropdown.Value == "Dumbells" then
                -- Function to equip Dumbells
                local function equipDumbells()
                    local equipment = GetBestPrisonEquipment("Dumbells")
                    local args = {
                        [1] = currentZone,
                        [2] = "Dumbells", 
                        [3] = equipment
                    }
                    game:GetService("ReplicatedStorage").Packages.Knit.Services.ToolService.RE.onGuiEquipRequest:FireServer(unpack(args))
                end

                -- Equip immediately
                equipDumbells()

                -- Click loop (every 0.2 seconds)
                spawn(function()
                    while AutoTrainToggle.Value do
                        game:GetService("ReplicatedStorage").Packages.Knit.Services.ToolService.RE.onClick:FireServer()
                        wait(0.2)
                    end
                end)

                -- Re-equip loop (every 5 seconds)
                while AutoTrainToggle.Value do
                    wait(5) -- Wait 5 seconds before re-equipping
                    if AutoTrainToggle.Value then
                        equipDumbells()
                    end
                end
                
            elseif TrainingDropdown.Value == "Grips" then
                -- Function to equip Grips
                local function equipGrips()
                    local equipment = GetBestPrisonEquipment("Grips")
                    local args = {
                        [1] = currentZone,
                        [2] = "Grips", 
                        [3] = equipment
                    }
                    game:GetService("ReplicatedStorage").Packages.Knit.Services.ToolService.RE.onGuiEquipRequest:FireServer(unpack(args))
                end

                -- Equip immediately
                equipGrips()

                -- Click loop (every 0.2 seconds)
                spawn(function()
                    while AutoTrainToggle.Value do
                        game:GetService("ReplicatedStorage").Packages.Knit.Services.ToolService.RE.onClick:FireServer()
                        wait(0.2)
                    end
                end)

                -- Re-equip loop (every 5 seconds)
                while AutoTrainToggle.Value do
                    wait(5) -- Wait 5 seconds before re-equipping
                    if AutoTrainToggle.Value then
                        equipGrips()
                    end
                end
            else 
                spawn(function() 
                    local lastTeleport = 0
                    while AutoTrainToggle.Value do
                        local tier = GetBestPrisonBag()
                        local bag = workspace.Zones[currentZone].Interactables.Training.PunchBags[tier]
                        
                        if bag then
                            -- Only teleport every 5 seconds
                            local currentTime = tick()
                            if currentTime - lastTeleport >= 5 then
                                local bagCFrame = bag:GetPivot()
                                game.Players.LocalPlayer.Character:PivotTo(bagCFrame * CFrame.new(0, 0, -5))
                                lastTeleport = currentTime
                            end
                            
                            -- Use the punch bag service every 0.25 seconds
                            local args = {
                                [1] = currentZone,
                                [2] = tier,
                                [3] = game.Players.LocalPlayer:GetAttribute("VIP") == true
                            }
                            game:GetService("ReplicatedStorage").Packages.Knit.Services.PunchBagService.RE.onGiveStats:FireServer(unpack(args))
                        end
                        wait(0.2)
                    end
                end)
            end
        end)
    end
end)

-- Auto Fight Section
local FightSection = Tabs.Event:AddSection("Auto Fight")

local npcLocations = {
    RewindEvent = workspace.GameObjects.ArmWrestling.RewindEvent.NPC,
    RewindBank = workspace.GameObjects.ArmWrestling.RewindBank.NPC,
}

local modelNames = {}
local npcZones = {}
local npcModels = {} -- Store actual NPC model by name

-- Gather NPCs from all locations
for zone, path in pairs(npcLocations) do
    for _, npc in pairs(path:GetChildren()) do
        if npc:IsA("Model") then
            table.insert(modelNames, npc.Name)
            npcZones[npc.Name] = zone
            npcModels[npc.Name] = npc -- Store model reference
        end
    end
end

table.sort(modelNames)

local modelDropdown = Tabs.Event:AddDropdown("ModelDropdown", {
    Title = "Select Boss",
    Values = modelNames,
    Multi = false,
    Searchable = true,
    Default = modelNames[1]
})

local AutoFightToggle = Tabs.Event:AddToggle("AutoFight", {
    Title = "Auto Fight",
    Description = "If you want this to be faster, use the in game auto fight button on the botton of the fighting bar.",
    Default = false
})

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local EndFightSignal = ReplicatedStorage.Packages.Knit.Services.ArmWrestleService.RE.EndFightSignal

local lastFightEnded = true
local lastFightTime = 0

EndFightSignal.OnClientEvent:Connect(function()
    lastFightEnded = true
end)

AutoFightToggle:OnChanged(function()
    if AutoFightToggle.Value then
        spawn(function()
            while AutoFightToggle.Value do
                local selectedNPC = modelDropdown.Value
                local npcModel = npcModels[selectedNPC]

                if npcModel then
                    if lastFightEnded or (tick() - lastFightTime > 25) then
                        lastFightEnded = false
                        lastFightTime = tick()
                        game:GetService("ReplicatedStorage")
                            .Packages.Knit.Services.ArmWrestleService.RF
                            .RequestStartFight:InvokeServer(npcModel)
                    end
                end

                -- Wait for EndFightSignal or timeout
                local waited = 0
                while AutoFightToggle.Value and not lastFightEnded and waited < 25 do
                    wait(1)
                    waited = waited + 1
                end
                -- If 25 seconds passed and no signal, allow next fight anyway
                lastFightEnded = true

                -- Wait 2 seconds after fight ends before starting again
                if AutoFightToggle.Value then
                    wait(2)
                end
            end
        end)
    end
end)

local AutoClickToggle = Tabs.Event:AddToggle("AutoClick", {
    Title = "Auto Click", 
    Default = false 
})

AutoClickToggle:OnChanged(function()
    if AutoClickToggle.Value then
        spawn(function()
            while true do
                if not AutoClickToggle.Value then break end
                game:GetService("ReplicatedStorage").Packages.Knit.Services.ArmWrestleService.RE.onClickRequest:FireServer()
                wait(0.1)
            end
        end)
    end
end)




-- Eggs Section
local EggSection = Tabs.Event:AddSection("Eggs")

-- Hatch Amount Dropdown
local HatchAmountDropdown = Tabs.Event:AddDropdown("HatchAmount", {
    Title = "Hatch Amount",
    Values = {"1x", "3x", "8x", "30x", "Max"},
    Multi = false,
    Default = "1x"
})

-- Egg Selection Dropdown (Populated Dynamically)
local eggNames = getEggNames()
local EggDropdown = Tabs.Event:AddDropdown("EggSelect", {
    Title = "Select Egg",
    Values = eggNames,
    Multi = false,
    Default = eggNames[1] or "None"
})

-- Auto Hatch Toggle
local AutoHatchToggle = Tabs.Event:AddToggle("AutoHatch", {
    Title = "Auto Hatch",
    Default = false
})

AutoHatchToggle:OnChanged(function()
    if AutoHatchToggle.Value then
        spawn(function()
            while true do
                if not AutoHatchToggle.Value then break end

                local args = {}
                local selectedEgg = EggDropdown.Value
                local hatchMultiplier = HatchAmountDropdown.Value

                if hatchMultiplier == "1x" then
                    args = {selectedEgg, nil, nil, false, nil}
                elseif hatchMultiplier == "3x" then
                    args = {selectedEgg, nil, true, false}
                elseif hatchMultiplier == "8x" then
                    args = {selectedEgg, nil, false, true, true}
                elseif hatchMultiplier == "30x" then
                    args = {selectedEgg, nil, nil, false, nil, true}
                elseif hatchMultiplier == "Max" then
                    args = {selectedEgg, nil, nil, false, nil, true}
                end

                game:GetService("ReplicatedStorage").Packages.Knit.Services.EggService.RF.purchaseEgg:InvokeServer(unpack(args))
                wait(0.001)
            end
        end)
    end
end)




local WheelSection = Tabs.Event:AddSection("Rewind Wheel")

local GhostFortuneSpinDropdown = Tabs.Event:AddDropdown("GhostFortuneSpinAmount", {
    Title = "Spin Amount",
    Description = "Select Wheel Spin Amount",
    Values = {"1x", "3x", "10x"},
    Multi = false,
    Default = "1x"
})

local AutoGhostFortuneToggle = Tabs.Event:AddToggle("AutoGhostFortuneSpin", {
    Title = "Auto Bulk Rewind Wheel",
    Default = false
})

AutoGhostFortuneToggle:OnChanged(function()
    if AutoGhostFortuneToggle.Value then
        spawn(function()
            while true do
                if not AutoGhostFortuneToggle.Value then break end
                
                local args = {
                    [1] = "Rewind",
                    [2] = GhostFortuneSpinDropdown.Value == "3x" and "x10" or GhostFortuneSpinDropdown.Value == "10x" and "x25" or nil
                }
                game:GetService("ReplicatedStorage").Packages.Knit.Services.SpinnerService.RF.Spin:InvokeServer(unpack(args))
                
                wait(1)
            end
        end)
    end
end)


-- Add Break Walls Button to Event tab
local UtilitySection = Tabs.Event:AddSection("Breakable Walls")

local BreakWallsButton = UtilitySection:Button({
    Title = "Break All Walls",
    Description = "Removes all punchable walls (resets on rejoin). This allows you to get to areas, without needing the required strength.",
    Callback = function()
        local wallContainer = workspace.Zones.RewindEvent.Interactables.PunchableWall
        
        -- Check if the wall container exists
        if wallContainer then
            local count = #wallContainer:GetChildren()
            
            -- Delete all children (walls)
            for _, wall in pairs(wallContainer:GetChildren()) do
                wall:Destroy()
            end
        end
    end
})



local MerchantSection = Tabs.Merchant:AddSection("Rewind Shop")

local BlackMarketDropdown = Tabs.Merchant:AddDropdown("BlackMarketDropdown", {
    Title = "Select Shop Slot(s)",
    Values = {1, 2, 3, 4, 5, 6, 7, 8, 9},
    Multi = true,
    Default = {}
})

local AutoBuyToggle = Tabs.Merchant:AddToggle("AutoBuyToggle", {
    Title = "Auto Buy (Selected Slots)",
    Default = false
})

AutoBuyToggle:OnChanged(function()
    if AutoBuyToggle.Value then
        spawn(function()
            while AutoBuyToggle.Value do
                for i = 1, 3 do -- Buy 3 times per cycle
                    for number, isSelected in pairs(BlackMarketDropdown.Value) do
                        if isSelected then
                            local args = {
                                [1] = "RewindShop",
                                [2] = number
                            }
                            game:GetService("ReplicatedStorage").Packages.Knit.Services.ItemShopService.RF.Buy:InvokeServer(unpack(args))
                            wait(1)
                        end
                    end
                end
                wait(30) -- Wait 30 seconds before next cycle
            end
        end)
    end
end)



local MerchantSection = Tabs.Merchant:AddSection("Hidden Merchant")

local BlackMarketDropdown = Tabs.Merchant:AddDropdown("BlackMarketDropdown", {
    Title = "Select Merchant Slot(s)",
    Values = {1, 2, 3, 4, 5},
    Multi = true,
    Default = {1, 2, 3, 4, 5}
})

local AutoBuyToggle = Tabs.Merchant:AddToggle("AutoBuyToggle", {
    Title = "Auto Buy (Selected Slots)",
    Default = true
})

AutoBuyToggle:OnChanged(function()
    if AutoBuyToggle.Value then
        spawn(function()
            while true do
                if not AutoBuyToggle.Value then break end
                -- Buy 3 times
                for i = 1, 3 do
                    for number, isSelected in pairs(BlackMarketDropdown.Value) do
                        if isSelected then
                            local args = {
                                [1] = "Hidden Merchant",
                                [2] = number
                            }
                            game:GetService("ReplicatedStorage").Packages.Knit.Services.LimitedMerchantService.RF.BuyItem:InvokeServer(unpack(args))
                            wait(1)
                        end
                    end
                end
                wait(30) -- Wait 30 seconds before next cycle
            end
        end)
    end
end)




local MerchantSection = Tabs.Merchant:AddSection("Bank Merchant")

local BlackMarketDropdown = Tabs.Merchant:AddDropdown("BlackMarketDropdown", {
    Title = "Select Merchant Slot(s)",
    Values = {1, 2, 3, 4, 5},
    Multi = true,
    Default = {1, 2, 3, 4, 5}
})

local AutoBuyToggle = Tabs.Merchant:AddToggle("AutoBuyToggle", {
    Title = "Auto Buy (Selected Slots)",
    Default = true
})

AutoBuyToggle:OnChanged(function()
    if AutoBuyToggle.Value then
        spawn(function()
            while true do
                if not AutoBuyToggle.Value then break end
                -- Buy 3 times
                for i = 1, 3 do
                    for number, isSelected in pairs(BlackMarketDropdown.Value) do
                        if isSelected then
                            local args = {
                                [1] = "Bank Merchant",
                                [2] = number
                            }
                            game:GetService("ReplicatedStorage").Packages.Knit.Services.LimitedMerchantService.RF.BuyItem:InvokeServer(unpack(args))
                            wait(1)
                        end
                    end
                end
                wait(30) -- Wait 30 seconds before next cycle
            end
        end)
    end
end)

-- Section 1: Hire Wrestlers
local HireWrestlersSection = Tabs.Wrestlers:AddSection("Hire Wrestlers")

-- Dropdown for Wrestlers to Buy (1-6)
local WrestlerBuyDropdown = HireWrestlersSection:AddDropdown("WrestlerBuyDropdown", {
    Title = "Select wrestlers to Buy",
    Values = {1, 2, 3, 4, 5, 6, 7},
    Searchable = true,
    Multi = true,
    Default = {1, 2, 3, 4, 5, 6, 7}
})

-- Toggle for Auto Buy Wrestler
local BuyWrestlerToggle = HireWrestlersSection:AddToggle("BuyWrestlerToggle", {
    Title = "Auto Buy Wrestlers",
    Description = "Auto buys the selected wrestlers",
    Default = true
})

BuyWrestlerToggle:OnChanged(function()
    if BuyWrestlerToggle.Value then
        spawn(function()
            while true do
                if not BuyWrestlerToggle.Value then break end
                
                -- Loop through all selected wrestlers
                for wrestlerNum, isSelected in pairs(WrestlerBuyDropdown.Value) do
                    if isSelected then
                        local args = {
                            [1] = "Rewind" .. wrestlerNum
                        }
                        
                        game:GetService("ReplicatedStorage").Packages.Knit.Services.PersonalWrestleService.RF.BuyPersonalWrestler:InvokeServer(unpack(args))
                        wait(1) -- Small wait between purchases to prevent throttling
                    end
                end
                
                wait(30) -- Wait 30 seconds before next purchase cycle
            end
        end)
    end
end)

-- Section 2: Upgrade Wrestlers
local UpgradeWrestlersSection = Tabs.Wrestlers:AddSection("Upgrade Wrestlers")

-- Dropdown for Wrestlers to Upgrade (1-6)
local WrestlerUpgradeDropdown = UpgradeWrestlersSection:AddDropdown("WrestlerUpgradeDropdown", {
    Title = "Select Wrestlers for Upgrades",
    Values = {1, 2, 3, 4, 5, 6, 7},
    Multi = true,
    Searchable = true,
    Default = {}
})

-- Dropdown for Upgrade Types
local UpgradeTypeDropdown = UpgradeWrestlersSection:AddDropdown("UpgradeTypeDropdown", {
    Title = "Upgrade Types",
    Values = {"Item Luck", "Wrestling Speed", "Cash Upgrade", "Item Storage"},
    Multi = true,
    Default = {}
})

-- Toggle for Auto Upgrade Wrestlers
local UpgradeWrestlerToggle = UpgradeWrestlersSection:AddToggle("UpgradeWrestlerToggle", {
    Title = "Auto Upgrade Wrestlers",
    Description = "Automatically upgrades selected wrestlers with selected upgrades",
    Default = false
})

UpgradeWrestlerToggle:OnChanged(function()
    if UpgradeWrestlerToggle.Value then
        spawn(function()
            while true do
                if not UpgradeWrestlerToggle.Value then break end
                
                -- Buy upgrades 5 times every 30 seconds
                for cycle = 1, 5 do
                    -- Loop through selected wrestlers
                    for wrestlerNum, isSelected in pairs(WrestlerUpgradeDropdown.Value) do
                        if isSelected then
                            local wrestlerId = "Rewind" .. wrestlerNum
                            
                            -- Loop through selected upgrade types
                            for upgradeType, isTypeSelected in pairs(UpgradeTypeDropdown.Value) do
                                if isTypeSelected then
                                    local args = {
                                        [1] = wrestlerId,
                                        [2] = upgradeType
                                    }
                                    
                                    game:GetService("ReplicatedStorage").Packages.Knit.Services.PersonalWrestleService.RF.Upgrade:InvokeServer(unpack(args))
                                    wait(0.5) -- Small wait between upgrades
                                end
                            end
                        end
                    end
                    
                    wait(1) -- Wait between cycles
                end
                
                wait(30) -- Wait 30 seconds before next batch of upgrades
            end
        end)
    end
end)

-- Section 3: Claim Wrestler Loot
local ClaimWrestlerSection = Tabs.Wrestlers:AddSection("Claim Wrestler Loot")

-- Dropdown for Wrestlers to Claim (1-5)
local WrestlerClaimDropdown = ClaimWrestlerSection:AddDropdown("WrestlerClaimDropdown", {
    Title = "Select Wrestlers to Claim",
    Values = {1, 2, 3, 4, 5, 6, 7},
    Multi = true,
    Searchable = true,
    Default = {1, 2, 3, 4, 5, 6, 7}
})

-- Toggle for Auto Claim Wrestler
local ClaimWrestlerToggle = ClaimWrestlerSection:AddToggle("ClaimWrestlerToggle", {
    Title = "Auto Claim Rewards",
    Description = "Automatically claims rewards from selected wrestlers",
    Default = true
})

ClaimWrestlerToggle:OnChanged(function()
    if ClaimWrestlerToggle.Value then
        spawn(function()
            while true do
                if not ClaimWrestlerToggle.Value then break end
                
                -- Loop through all selected wrestlers
                for wrestlerNum, isSelected in pairs(WrestlerClaimDropdown.Value) do
                    if isSelected then
                        local args = {
                            [1] = "Rewind" .. wrestlerNum
                        }
                        
                        game:GetService("ReplicatedStorage").Packages.Knit.Services.PersonalWrestleService.RF.Claim:InvokeServer(unpack(args))
                        wait(0.5) -- Small wait between claims to prevent throttling
                    end
                end
                
                wait(5) -- Wait 5 seconds before next claim cycle
            end
        end)
    end
end)


-- Section: Buy ATMs
local BuyATMSection = Tabs.ATMs:AddSection("Buy ATMs")

-- Dropdown for ATMs to Buy (1-8)
local ATMBuyDropdown = BuyATMSection:AddDropdown("ATMBuyDropdown", {
    Title = "Select ATMs to Buy",
    Values = {1, 2, 3, 4, 5, 6, 7},
    Searchable = true,
    Multi = true,
    Default = {1, 2, 3, 4, 5, 6, 7}
})

-- Toggle for Auto Buy ATMs
local AutoBuyATMToggle = BuyATMSection:AddToggle("AutoBuyATMToggle", {
    Title = "Auto Buy ATMs",
    Description = "Automatically purchases selected ATMs",
    Default = true
})

AutoBuyATMToggle:OnChanged(function()
    if AutoBuyATMToggle.Value then
        spawn(function()
            while AutoBuyATMToggle.Value do
                -- Loop through selected ATM numbers
                for atmNum, isSelected in pairs(ATMBuyDropdown.Value) do
                    if isSelected then
                        local args = {
                            [1] = "RewindATM" .. atmNum
                        }

                        game:GetService("ReplicatedStorage").Packages.Knit.Services.PersonalTycoonService.RF.BuyPersonalTycoon:InvokeServer(unpack(args))
                        wait(1) -- Delay between purchases to avoid throttling
                    end
                end
                wait(30) -- Wait before next purchase cycle
            end
        end)
    end
end)


-- Section 2: Upgrade ATMs
local UpgradeATMSection = Tabs.ATMs:AddSection("Upgrade ATMs")

-- Dropdown for ATMs to Upgrade
local ATMUpgradeDropdown = UpgradeATMSection:AddDropdown("ATMUpgradeDropdown", {
    Title = "Select ATMs to Upgrade",
    Values = {1, 2, 3, 4, 5, 6, 7},
    Multi = true,
    Searchable = true,
    Default = {}
})

-- Dropdown for Upgrade Types
local ATMUpgradeTypeDropdown = UpgradeATMSection:AddDropdown("ATMUpgradeTypeDropdown", {
    Title = "Upgrade Types",
    Values = {"Item Luck", "Cash Upgrade", "Item Storage", "Wrestling Speed"},
    Multi = true,
    Default = {}
})

-- Toggle for Auto Upgrade ATMs
local AutoUpgradeATMToggle = UpgradeATMSection:AddToggle("AutoUpgradeATMToggle", {
    Title = "Auto Upgrade ATMs",
    Description = "Automatically upgrades selected ATMs with selected upgrades",
    Default = false
})

AutoUpgradeATMToggle:OnChanged(function()
    if AutoUpgradeATMToggle.Value then
        spawn(function()
            while AutoUpgradeATMToggle.Value do
                for cycle = 1, 5 do
                    for atmNum, isSelected in pairs(ATMUpgradeDropdown.Value) do
                        if isSelected then
                            local atmId = "RewindATM" .. atmNum
                            for upgradeType, isTypeSelected in pairs(ATMUpgradeTypeDropdown.Value) do
                                if isTypeSelected then
                                    local args = {
                                        [1] = atmId,
                                        [2] = upgradeType
                                    }
                                    game:GetService("ReplicatedStorage").Packages.Knit.Services.PersonalTycoonService.RF.Upgrade:InvokeServer(unpack(args))
                                    wait(0.5)
                                end
                            end
                        end
                    end
                    wait(1)
                end
                wait(30)
            end
        end)
    end
end)


-- Section 1: Claim ATMs
local ClaimATMSection = Tabs.ATMs:AddSection("Claim ATMs")

-- Dropdown for ATMs to Claim (e.g. 1-7)
local ATMClaimDropdown = ClaimATMSection:AddDropdown("ATMClaimDropdown", {
    Title = "ATMs to Claim",
    Values = {1, 2, 3, 4, 5, 6, 7},  -- adjust numbers as needed
    Multi = true,
    Searchable = true,
    Default = {1, 2, 3, 4, 5, 6, 7}
})

-- Toggle for Auto Claim ATMs
local AutoClaimATMToggle = ClaimATMSection:AddToggle("AutoClaimATMToggle", {
    Title = "Auto Claim ATMs",
    Description = "Automatically claims rewards from selected ATMs",
    Default = true
})

AutoClaimATMToggle:OnChanged(function()
    if AutoClaimATMToggle.Value then
        spawn(function()
            while AutoClaimATMToggle.Value do
                for atmNum, isSelected in pairs(ATMClaimDropdown.Value) do
                    if isSelected then
                        local args = {
                            [1] = "RewindATM" .. atmNum
                        }
                        game:GetService("ReplicatedStorage").Packages.Knit.Services.PersonalTycoonService.RF.Claim:InvokeServer(unpack(args))
                        wait(0.5)
                    end
                end
                wait(5)
            end
        end)
    end
end)

-- Section for Player Upgrades
local UpgradeSection = Tabs.Upgrades:AddSection("Auto Upgrade")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local localPlayer = Players.LocalPlayer
local PersonalUpgrades = require(ReplicatedStorage.Data.Upgrades.PersonalUpgrades)


Tabs.Upgrades:Paragraph("Aligned Paragraph", {
    Title = "Note",
    Content = "This won't use your cash, but it will still buy the upgrades. However it is not possible to buy all the upgrades unless you have the proper amount of cash.",
    TitleAlignment = "Middle",
    ContentAlignment = Enum.TextXAlignment.Center
})

-- Toggle for Auto RewindStrength Upgrade
local AutoStrengthToggle = UpgradeSection:AddToggle("AutoRewindStrength", {
    Title = "Auto Buy RewindStrength",
    Default = true
})

-- Toggle for Auto RewindLuck Upgrade
local AutoLuckToggle = UpgradeSection:AddToggle("AutoRewindLuck", {
    Title = "Auto Buy RewindLuck",
    Default = true
})

-- Function to check and buy upgrade
local function tryUpgrade(upgradeName)
    local Knit = require(ReplicatedStorage.Packages.Knit)
    Knit.OnStart():andThen(function()
        local CustomReplicaController = Knit.GetController("CustomReplicaController")
        local replica = CustomReplicaController:GetReplica()
        local upgrades = replica.Data.PersonalUpgrades
        local rewindCash = localPlayer:GetAttribute("RewindCashV2") or 0

        local level = upgrades[upgradeName] or 0
        local upgradeData = PersonalUpgrades[upgradeName]
        if upgradeData and upgradeData.Upgrades then
            local nextUpgrade = upgradeData.Upgrades[level + 1]
            if nextUpgrade and rewindCash >= nextUpgrade.Price then
                local args = {
                    [1] = upgradeName,
                    [2] = level + 1
                }
                ReplicatedStorage.Packages.Knit.Services.PersonalUpgradeService.RF.Upgrade:InvokeServer(unpack(args))
            end
        end
    end)
end

-- Auto buy loop for RewindStrength
AutoStrengthToggle:OnChanged(function()
    if AutoStrengthToggle.Value then
        spawn(function()
            while AutoStrengthToggle.Value do
                tryUpgrade("RewindStrength")
                wait(5)
            end
        end)
    end
end)

-- Auto buy loop for RewindLuck
AutoLuckToggle:OnChanged(function()
    if AutoLuckToggle.Value then
        spawn(function()
            while AutoLuckToggle.Value do
                tryUpgrade("RewindLuck")
                wait(5)
            end
        end)
    end
end)


local TowerSection = Tabs.Towers:AddSection("Towers")


-- Prison Cave Buttons
TowerSection:AddButton({
    Title = "Use Mafia Tryout Keys (1x)",
    Description = "Use the Mafia Tryout Keys once.",
    Callback = function()
        local args = {
            [1] = "MafiaTryout",
            [2] = false
        }
        game:GetService("ReplicatedStorage").Packages.Knit.Services.TowerService.RF.EnterTower:InvokeServer(unpack(args))
    end
})

TowerSection:AddButton({
    Title = "Use All Mafia Tryout Keys (250x)",
    Description = "Use All Mafia Tryout Keys (max 250 at a time).",
    Callback = function()
        local args = {
            [1] = "MafiaTryout",
            [2] = true
        }
        game:GetService("ReplicatedStorage").Packages.Knit.Services.TowerService.RF.EnterTower:InvokeServer(unpack(args))
    end
})


local RewindQuestSection = Tabs.Claim:AddSection("Rewind Event Quests")

-- Create button for claiming all quest items
local ClaimAllRewindQuestsButton = RewindQuestSection:Button({
    Title = "Complete Rewind Event Quests",
    Description = "Automatically completes Bacon Hair and Lost Traveler quests",
    Callback = function()
        -- Get required services
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local Knit = require(ReplicatedStorage.Packages.Knit)
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
        
        -- STEP 1: Try to pick up Bacon Hair if available using proximity prompt
        pcall(function()
            print("Attempting to pick up BaconHair...")
            local baconHair = workspace.Zones.RewindEvent.Interactables.Quest.BaconHair
            if baconHair and baconHair:FindFirstChild("Part") and baconHair.Part:FindFirstChild("ProximityPrompt") then
                -- Teleport to the item first
                humanoidRootPart.CFrame = baconHair.Part.CFrame
                wait(0.5)
                fireproximityprompt(baconHair.Part.ProximityPrompt)
                print("Successfully fired proximity prompt for BaconHair")
                wait(1)
            else
                print("BaconHair not found or already collected")
            end
        end)
        
        -- STEP 2: Try to deliver Bacon Hair if it was picked up
        pcall(function()
            print("Attempting to deliver BaconHair...")
            local baconHairDelivery = workspace.Zones.RewindEvent.Interactables.Quest.BaconPerson
            if baconHairDelivery and baconHairDelivery:FindFirstChild("HumanoidRootPart") and 
               baconHairDelivery.HumanoidRootPart:FindFirstChild("ProximityPrompt") then
                -- Teleport to the delivery point first
                humanoidRootPart.CFrame = baconHairDelivery.HumanoidRootPart.CFrame
                wait(0.5)
                fireproximityprompt(baconHairDelivery.HumanoidRootPart.ProximityPrompt)
                print("Successfully fired proximity prompt for BaconHair delivery")
                wait(1)
            else
                print("BaconPerson not found or delivery not needed")
            end
        end)
        
        -- STEP 3: Lost Traveler items - find, pick up, and deliver one by one using proximity prompts and teleporting
        pcall(function()
            local lostTravelerQuestItems = workspace.Zones.RewindEvent.Interactables.Quest.LostTraveler.Items.QuestItems:GetChildren()
            local lostTravelerHitbox = workspace.Zones.RewindEvent.Interactables.Quest.LostTraveler.Touch.Hitbox
            
            -- Check if hitbox exists for delivery
            if not lostTravelerHitbox then
                print("Lost Traveler Hitbox not found for delivery")
                return
            end
            
            -- Calculate position 3 studs above the hitbox
            local deliveryPosition = lostTravelerHitbox.CFrame + Vector3.new(0, 3, 0)
            
            if #lostTravelerQuestItems > 0 then
                print("Found " .. #lostTravelerQuestItems .. " Lost Traveler items to pick up")
                
                for _, item in pairs(lostTravelerQuestItems) do
                    -- Find the proximity prompt in the item
                    local itemPrompt
                    local itemPart
                    
                    if item:FindFirstChild("Part") and item.Part:FindFirstChild("ProximityPrompt") then
                        itemPrompt = item.Part.ProximityPrompt
                        itemPart = item.Part
                    else
                        for _, descendant in pairs(item:GetDescendants()) do
                            if descendant:IsA("ProximityPrompt") then
                                itemPrompt = descendant
                                itemPart = descendant.Parent
                                break
                            end
                        end
                    end
                    
                    if itemPrompt and itemPart then
                        -- Teleport to the item and pick it up
                        print("Teleporting to and picking up: " .. item.Name)
                        humanoidRootPart.CFrame = itemPart.CFrame
                        wait(0.5)
                        fireproximityprompt(itemPrompt)
                        wait(1)
                        
                        -- Teleport 3 studs above the Lost Traveler hitbox
                        print("Teleporting above hitbox to deliver: " .. item.Name)
                        humanoidRootPart.CFrame = deliveryPosition
                        wait(1)
                    else
                        print("Could not find proximity prompt for: " .. item.Name)
                    end
                end
                
                print("All Lost Traveler items processed")
            else
                print("No Lost Traveler items found to pick up")
            end
        end)
        
        print("Quest completion attempts finished!")
    end
})
